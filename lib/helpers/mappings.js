"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTemplateUrl = exports.RegionMap = void 0;
/**
 * Region mappings for RStreams platform resources
 */
exports.RegionMap = {
    'us-west-2': {
        S3Bucket: 'leo-cli-publishbucket-mzhr7agmqo7u',
        AuthTemplateUrl: 'https://leo-cli-publishbucket-mzhr7agmqo7u.s3-us-west-2.amazonaws.com/auth/2.0.0/cloudformation-auth-1652216325999.json',
        BusTemplateUrl: 'https://leo-cli-publishbucket-mzhr7agmqo7u.s3-us-west-2.amazonaws.com/leo-bus/3.2.0/cloudformation-1669137956326.json',
        BotmonTemplateUrl: 'https://leo-cli-publishbucket-mzhr7agmqo7u.s3-us-west-2.amazonaws.com/botmon/3.0.2/cloudformation-1667947716066.json',
        CognitoTemplateUrl: 'https://leo-cli-publishbucket-mzhr7agmqo7u.s3-us-west-2.amazonaws.com/leo-Cognito/cloudformation-latest.json'
    },
    'us-east-1': {
        S3Bucket: 'leo-cli-publishbucket-abb4i613j9y9',
        AuthTemplateUrl: 'https://leo-cli-publishbucket-abb4i613j9y9.s3.amazonaws.com/auth/2.0.0/cloudformation-auth-1652216325999.json',
        BusTemplateUrl: 'https://leo-cli-publishbucket-abb4i613j9y9.s3.amazonaws.com/leo-bus/3.2.0/cloudformation-1669137956326.json',
        BotmonTemplateUrl: 'https://leo-cli-publishbucket-abb4i613j9y9.s3.amazonaws.com/botmon/3.0.2/cloudformation-1667947716066.json',
        CognitoTemplateUrl: 'https://leo-cli-publishbucket-abb4i613j9y9.s3.amazonaws.com/leo-Cognito/cloudformation-latest.json'
    }
};
/**
 * Get template URL based on region and template type
 */
function getTemplateUrl(region, templateType) {
    const regionData = exports.RegionMap[region];
    if (!regionData) {
        throw new Error(`Region ${region} not supported in mappings`);
    }
    const urlKey = `${templateType}TemplateUrl`;
    return regionData[urlKey];
}
exports.getTemplateUrl = getTemplateUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXBwaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNVLFFBQUEsU0FBUyxHQUFHO0lBQ3ZCLFdBQVcsRUFBRTtRQUNYLFFBQVEsRUFBRSxvQ0FBb0M7UUFDOUMsZUFBZSxFQUFFLHlIQUF5SDtRQUMxSSxjQUFjLEVBQUUsdUhBQXVIO1FBQ3ZJLGlCQUFpQixFQUFFLHNIQUFzSDtRQUN6SSxrQkFBa0IsRUFBRSw4R0FBOEc7S0FDbkk7SUFDRCxXQUFXLEVBQUU7UUFDWCxRQUFRLEVBQUUsb0NBQW9DO1FBQzlDLGVBQWUsRUFBRSwrR0FBK0c7UUFDaEksY0FBYyxFQUFFLDZHQUE2RztRQUM3SCxpQkFBaUIsRUFBRSw0R0FBNEc7UUFDL0gsa0JBQWtCLEVBQUUsb0dBQW9HO0tBQ3pIO0NBQ0YsQ0FBQztBQUVGOztHQUVHO0FBQ0gsU0FBZ0IsY0FBYyxDQUFDLE1BQWMsRUFBRSxZQUFtRDtJQUNoRyxNQUFNLFVBQVUsR0FBRyxpQkFBUyxDQUFDLE1BQWdDLENBQUMsQ0FBQztJQUMvRCxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLE1BQU0sNEJBQTRCLENBQUMsQ0FBQztLQUMvRDtJQUVELE1BQU0sTUFBTSxHQUFHLEdBQUcsWUFBWSxhQUF3QyxDQUFDO0lBQ3ZFLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFSRCx3Q0FRQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVnaW9uIG1hcHBpbmdzIGZvciBSU3RyZWFtcyBwbGF0Zm9ybSByZXNvdXJjZXNcbiAqL1xuZXhwb3J0IGNvbnN0IFJlZ2lvbk1hcCA9IHtcbiAgJ3VzLXdlc3QtMic6IHtcbiAgICBTM0J1Y2tldDogJ2xlby1jbGktcHVibGlzaGJ1Y2tldC1temhyN2FnbXFvN3UnLFxuICAgIEF1dGhUZW1wbGF0ZVVybDogJ2h0dHBzOi8vbGVvLWNsaS1wdWJsaXNoYnVja2V0LW16aHI3YWdtcW83dS5zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9hdXRoLzIuMC4wL2Nsb3VkZm9ybWF0aW9uLWF1dGgtMTY1MjIxNjMyNTk5OS5qc29uJyxcbiAgICBCdXNUZW1wbGF0ZVVybDogJ2h0dHBzOi8vbGVvLWNsaS1wdWJsaXNoYnVja2V0LW16aHI3YWdtcW83dS5zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9sZW8tYnVzLzMuMi4wL2Nsb3VkZm9ybWF0aW9uLTE2NjkxMzc5NTYzMjYuanNvbicsXG4gICAgQm90bW9uVGVtcGxhdGVVcmw6ICdodHRwczovL2xlby1jbGktcHVibGlzaGJ1Y2tldC1temhyN2FnbXFvN3UuczMtdXMtd2VzdC0yLmFtYXpvbmF3cy5jb20vYm90bW9uLzMuMC4yL2Nsb3VkZm9ybWF0aW9uLTE2Njc5NDc3MTYwNjYuanNvbicsXG4gICAgQ29nbml0b1RlbXBsYXRlVXJsOiAnaHR0cHM6Ly9sZW8tY2xpLXB1Ymxpc2hidWNrZXQtbXpocjdhZ21xbzd1LnMzLXVzLXdlc3QtMi5hbWF6b25hd3MuY29tL2xlby1Db2duaXRvL2Nsb3VkZm9ybWF0aW9uLWxhdGVzdC5qc29uJ1xuICB9LFxuICAndXMtZWFzdC0xJzoge1xuICAgIFMzQnVja2V0OiAnbGVvLWNsaS1wdWJsaXNoYnVja2V0LWFiYjRpNjEzajl5OScsXG4gICAgQXV0aFRlbXBsYXRlVXJsOiAnaHR0cHM6Ly9sZW8tY2xpLXB1Ymxpc2hidWNrZXQtYWJiNGk2MTNqOXk5LnMzLmFtYXpvbmF3cy5jb20vYXV0aC8yLjAuMC9jbG91ZGZvcm1hdGlvbi1hdXRoLTE2NTIyMTYzMjU5OTkuanNvbicsXG4gICAgQnVzVGVtcGxhdGVVcmw6ICdodHRwczovL2xlby1jbGktcHVibGlzaGJ1Y2tldC1hYmI0aTYxM2o5eTkuczMuYW1hem9uYXdzLmNvbS9sZW8tYnVzLzMuMi4wL2Nsb3VkZm9ybWF0aW9uLTE2NjkxMzc5NTYzMjYuanNvbicsXG4gICAgQm90bW9uVGVtcGxhdGVVcmw6ICdodHRwczovL2xlby1jbGktcHVibGlzaGJ1Y2tldC1hYmI0aTYxM2o5eTkuczMuYW1hem9uYXdzLmNvbS9ib3Rtb24vMy4wLjIvY2xvdWRmb3JtYXRpb24tMTY2Nzk0NzcxNjA2Ni5qc29uJyxcbiAgICBDb2duaXRvVGVtcGxhdGVVcmw6ICdodHRwczovL2xlby1jbGktcHVibGlzaGJ1Y2tldC1hYmI0aTYxM2o5eTkuczMuYW1hem9uYXdzLmNvbS9sZW8tQ29nbml0by9jbG91ZGZvcm1hdGlvbi1sYXRlc3QuanNvbidcbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGVtcGxhdGUgVVJMIGJhc2VkIG9uIHJlZ2lvbiBhbmQgdGVtcGxhdGUgdHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVtcGxhdGVVcmwocmVnaW9uOiBzdHJpbmcsIHRlbXBsYXRlVHlwZTogJ0F1dGgnIHwgJ0J1cycgfCAnQm90bW9uJyB8ICdDb2duaXRvJyk6IHN0cmluZyB7XG4gIGNvbnN0IHJlZ2lvbkRhdGEgPSBSZWdpb25NYXBbcmVnaW9uIGFzIGtleW9mIHR5cGVvZiBSZWdpb25NYXBdO1xuICBpZiAoIXJlZ2lvbkRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJlZ2lvbiAke3JlZ2lvbn0gbm90IHN1cHBvcnRlZCBpbiBtYXBwaW5nc2ApO1xuICB9XG4gIFxuICBjb25zdCB1cmxLZXkgPSBgJHt0ZW1wbGF0ZVR5cGV9VGVtcGxhdGVVcmxgIGFzIGtleW9mIHR5cGVvZiByZWdpb25EYXRhO1xuICByZXR1cm4gcmVnaW9uRGF0YVt1cmxLZXldO1xufVxuIl19