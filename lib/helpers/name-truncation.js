"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTruncatedName = createTruncatedName;
/**
 * Creates a truncated resource name that fits within AWS's 64-character limit.
 * Includes a unique hash suffix to prevent naming collisions.
 *
 * @param stack The stack name (will be truncated to 15 chars)
 * @param id The resource ID
 * @param resourceType Type of resource (e.g., 'Role', 'ApiRole', etc.)
 * @param env Environment name (will be truncated to 6 chars)
 * @param separator Separator character between parts (default: '-')
 * @param forceCase 'lower' | 'upper' | null - Force case of the output (default: null)
 * @returns Truncated resource name string with unique hash suffix
 */
function createTruncatedName(stack, id, resourceType, env, separator = '-', forceCase = null) {
    // Truncate required parts
    const truncatedStack = stack.substring(0, 15);
    const truncatedEnv = env.substring(0, 6);
    // Generate a unique hash based on all inputs
    const crypto = require('crypto');
    const hashInput = `${stack}${id}${resourceType}${env}`;
    const hash = crypto.createHash('sha256').update(hashInput).digest('hex').substring(0, 8).toUpperCase();
    // Calculate remaining characters for ID
    // Format: [env]-[stack]-[id]-[resourceType]-[hash]
    // Add 4 for the separators (assuming separator is 1 character)
    const usedChars = truncatedEnv.length + truncatedStack.length + resourceType.length + hash.length + 4 * separator.length;
    const maxIdLength = 64 - usedChars;
    // Truncate ID if needed
    const truncatedId = id.length > maxIdLength ? id.substring(0, maxIdLength) : id;
    // Construct the name with environment at the beginning and hash at the end
    let result = [truncatedEnv, truncatedStack, truncatedId, resourceType, hash].join(separator);
    // Apply case transformation if requested
    if (forceCase === 'lower') {
        result = result.toLowerCase();
    }
    else if (forceCase === 'upper') {
        result = result.toUpperCase();
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS10cnVuY2F0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmFtZS10cnVuY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBWUEsa0RBcUNDO0FBakREOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsU0FBZ0IsbUJBQW1CLENBQ2pDLEtBQWEsRUFDYixFQUFVLEVBQ1YsWUFBb0IsRUFDcEIsR0FBVyxFQUNYLFlBQW9CLEdBQUcsRUFDdkIsWUFBc0MsSUFBSTtJQUUxQywwQkFBMEI7SUFDMUIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFekMsNkNBQTZDO0lBQzdDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxNQUFNLFNBQVMsR0FBRyxHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUcsWUFBWSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ3ZELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXZHLHdDQUF3QztJQUN4QyxtREFBbUQ7SUFDbkQsK0RBQStEO0lBQy9ELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDekgsTUFBTSxXQUFXLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQztJQUVuQyx3QkFBd0I7SUFDeEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFaEYsMkVBQTJFO0lBQzNFLElBQUksTUFBTSxHQUFHLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUU3Rix5Q0FBeUM7SUFDekMsSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFLENBQUM7UUFDMUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxDQUFDO1NBQU0sSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFLENBQUM7UUFDakMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlcyBhIHRydW5jYXRlZCByZXNvdXJjZSBuYW1lIHRoYXQgZml0cyB3aXRoaW4gQVdTJ3MgNjQtY2hhcmFjdGVyIGxpbWl0LlxuICogSW5jbHVkZXMgYSB1bmlxdWUgaGFzaCBzdWZmaXggdG8gcHJldmVudCBuYW1pbmcgY29sbGlzaW9ucy5cbiAqIFxuICogQHBhcmFtIHN0YWNrIFRoZSBzdGFjayBuYW1lICh3aWxsIGJlIHRydW5jYXRlZCB0byAxNSBjaGFycylcbiAqIEBwYXJhbSBpZCBUaGUgcmVzb3VyY2UgSURcbiAqIEBwYXJhbSByZXNvdXJjZVR5cGUgVHlwZSBvZiByZXNvdXJjZSAoZS5nLiwgJ1JvbGUnLCAnQXBpUm9sZScsIGV0Yy4pXG4gKiBAcGFyYW0gZW52IEVudmlyb25tZW50IG5hbWUgKHdpbGwgYmUgdHJ1bmNhdGVkIHRvIDYgY2hhcnMpXG4gKiBAcGFyYW0gc2VwYXJhdG9yIFNlcGFyYXRvciBjaGFyYWN0ZXIgYmV0d2VlbiBwYXJ0cyAoZGVmYXVsdDogJy0nKVxuICogQHBhcmFtIGZvcmNlQ2FzZSAnbG93ZXInIHwgJ3VwcGVyJyB8IG51bGwgLSBGb3JjZSBjYXNlIG9mIHRoZSBvdXRwdXQgKGRlZmF1bHQ6IG51bGwpXG4gKiBAcmV0dXJucyBUcnVuY2F0ZWQgcmVzb3VyY2UgbmFtZSBzdHJpbmcgd2l0aCB1bmlxdWUgaGFzaCBzdWZmaXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRydW5jYXRlZE5hbWUoXG4gIHN0YWNrOiBzdHJpbmcsXG4gIGlkOiBzdHJpbmcsXG4gIHJlc291cmNlVHlwZTogc3RyaW5nLFxuICBlbnY6IHN0cmluZyxcbiAgc2VwYXJhdG9yOiBzdHJpbmcgPSAnLScsXG4gIGZvcmNlQ2FzZTogJ2xvd2VyJyB8ICd1cHBlcicgfCBudWxsID0gbnVsbFxuKTogc3RyaW5nIHtcbiAgLy8gVHJ1bmNhdGUgcmVxdWlyZWQgcGFydHNcbiAgY29uc3QgdHJ1bmNhdGVkU3RhY2sgPSBzdGFjay5zdWJzdHJpbmcoMCwgMTUpO1xuICBjb25zdCB0cnVuY2F0ZWRFbnYgPSBlbnYuc3Vic3RyaW5nKDAsIDYpO1xuICBcbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaGFzaCBiYXNlZCBvbiBhbGwgaW5wdXRzXG4gIGNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuICBjb25zdCBoYXNoSW5wdXQgPSBgJHtzdGFja30ke2lkfSR7cmVzb3VyY2VUeXBlfSR7ZW52fWA7XG4gIGNvbnN0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGhhc2hJbnB1dCkuZGlnZXN0KCdoZXgnKS5zdWJzdHJpbmcoMCwgOCkudG9VcHBlckNhc2UoKTtcbiAgXG4gIC8vIENhbGN1bGF0ZSByZW1haW5pbmcgY2hhcmFjdGVycyBmb3IgSURcbiAgLy8gRm9ybWF0OiBbZW52XS1bc3RhY2tdLVtpZF0tW3Jlc291cmNlVHlwZV0tW2hhc2hdXG4gIC8vIEFkZCA0IGZvciB0aGUgc2VwYXJhdG9ycyAoYXNzdW1pbmcgc2VwYXJhdG9yIGlzIDEgY2hhcmFjdGVyKVxuICBjb25zdCB1c2VkQ2hhcnMgPSB0cnVuY2F0ZWRFbnYubGVuZ3RoICsgdHJ1bmNhdGVkU3RhY2subGVuZ3RoICsgcmVzb3VyY2VUeXBlLmxlbmd0aCArIGhhc2gubGVuZ3RoICsgNCAqIHNlcGFyYXRvci5sZW5ndGg7XG4gIGNvbnN0IG1heElkTGVuZ3RoID0gNjQgLSB1c2VkQ2hhcnM7XG4gIFxuICAvLyBUcnVuY2F0ZSBJRCBpZiBuZWVkZWRcbiAgY29uc3QgdHJ1bmNhdGVkSWQgPSBpZC5sZW5ndGggPiBtYXhJZExlbmd0aCA/IGlkLnN1YnN0cmluZygwLCBtYXhJZExlbmd0aCkgOiBpZDtcbiAgXG4gIC8vIENvbnN0cnVjdCB0aGUgbmFtZSB3aXRoIGVudmlyb25tZW50IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGhhc2ggYXQgdGhlIGVuZFxuICBsZXQgcmVzdWx0ID0gW3RydW5jYXRlZEVudiwgdHJ1bmNhdGVkU3RhY2ssIHRydW5jYXRlZElkLCByZXNvdXJjZVR5cGUsIGhhc2hdLmpvaW4oc2VwYXJhdG9yKTtcbiAgXG4gIC8vIEFwcGx5IGNhc2UgdHJhbnNmb3JtYXRpb24gaWYgcmVxdWVzdGVkXG4gIGlmIChmb3JjZUNhc2UgPT09ICdsb3dlcicpIHtcbiAgICByZXN1bHQgPSByZXN1bHQudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmIChmb3JjZUNhc2UgPT09ICd1cHBlcicpIHtcbiAgICByZXN1bHQgPSByZXN1bHQudG9VcHBlckNhc2UoKTtcbiAgfVxuICBcbiAgcmV0dXJuIHJlc3VsdDtcbn0gIl19